<<<<<<< HEAD
{"remainingRequest":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\rxjs\\_esm5\\operator\\mergeMap.js","dependencies":[{"path":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\rxjs\\_esm5\\operator\\mergeMap.js","mtime":1588447201896},{"path":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1588447194304},{"path":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1588447190623}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_mergeMap PURE_IMPORTS_END */\r\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 'c');\r\n * var result = letters.mergeMap(x =>\r\n *   Rx.Observable.interval(1000).map(i => x+i)\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a,b,c with respective ascending integers\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method mergeMap\r\n * @owner Observable\r\n */\r\nexport function mergeMap(project, resultSelector, concurrent) {\r\n    if (concurrent === void 0) {\r\n        concurrent = Number.POSITIVE_INFINITY;\r\n    }\r\n    return higherOrderMergeMap(project, resultSelector, concurrent)(this);\r\n}\r\n//# sourceMappingURL=mergeMap.js.map\r\n",null]}
=======
{"remainingRequest":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\rxjs\\_esm5\\operator\\mergeMap.js","dependencies":[{"path":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\rxjs\\_esm5\\operator\\mergeMap.js","mtime":499162500000},{"path":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gamer\\Spring2020Code\\CSCI3010-Project\\Code\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_mergeMap PURE_IMPORTS_END */\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return higherOrderMergeMap(project, resultSelector, concurrent)(this);\n}\n//# sourceMappingURL=mergeMap.js.map\n",null]}
>>>>>>> 55c2fe267dd0300526f5d749820d0932eb3c5bcf
